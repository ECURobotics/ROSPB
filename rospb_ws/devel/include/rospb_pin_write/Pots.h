// Generated by gencpp from file rospb_pin_write/Pots.msg
// DO NOT EDIT!


#ifndef ROSPB_PIN_WRITE_MESSAGE_POTS_H
#define ROSPB_PIN_WRITE_MESSAGE_POTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rospb_pin_write
{
template <class ContainerAllocator>
struct Pots_
{
  typedef Pots_<ContainerAllocator> Type;

  Pots_()
    : pot1(0)
    , pot2(0)
    , A0(0)
    , A1(0)
    , A2(0)
    , A3(0)
    , A4(0)
    , A5(0)  {
    }
  Pots_(const ContainerAllocator& _alloc)
    : pot1(0)
    , pot2(0)
    , A0(0)
    , A1(0)
    , A2(0)
    , A3(0)
    , A4(0)
    , A5(0)  {
  (void)_alloc;
    }



   typedef uint16_t _pot1_type;
  _pot1_type pot1;

   typedef uint16_t _pot2_type;
  _pot2_type pot2;

   typedef uint16_t _A0_type;
  _A0_type A0;

   typedef uint16_t _A1_type;
  _A1_type A1;

   typedef uint16_t _A2_type;
  _A2_type A2;

   typedef uint16_t _A3_type;
  _A3_type A3;

   typedef uint16_t _A4_type;
  _A4_type A4;

   typedef uint16_t _A5_type;
  _A5_type A5;





  typedef boost::shared_ptr< ::rospb_pin_write::Pots_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rospb_pin_write::Pots_<ContainerAllocator> const> ConstPtr;

}; // struct Pots_

typedef ::rospb_pin_write::Pots_<std::allocator<void> > Pots;

typedef boost::shared_ptr< ::rospb_pin_write::Pots > PotsPtr;
typedef boost::shared_ptr< ::rospb_pin_write::Pots const> PotsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rospb_pin_write::Pots_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rospb_pin_write::Pots_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rospb_pin_write

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'rospb_pin_write': ['/home/ubuntu/ROSPB/rospb_ws/src/rospb_pin_write/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rospb_pin_write::Pots_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rospb_pin_write::Pots_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rospb_pin_write::Pots_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rospb_pin_write::Pots_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rospb_pin_write::Pots_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rospb_pin_write::Pots_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rospb_pin_write::Pots_<ContainerAllocator> >
{
  static const char* value()
  {
    return "87137d7724e5f2f39cedc2787f725d30";
  }

  static const char* value(const ::rospb_pin_write::Pots_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x87137d7724e5f2f3ULL;
  static const uint64_t static_value2 = 0x9cedc2787f725d30ULL;
};

template<class ContainerAllocator>
struct DataType< ::rospb_pin_write::Pots_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rospb_pin_write/Pots";
  }

  static const char* value(const ::rospb_pin_write::Pots_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rospb_pin_write::Pots_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 pot1\n\
uint16 pot2\n\
uint16 A0\n\
uint16 A1\n\
uint16 A2\n\
uint16 A3\n\
uint16 A4\n\
uint16 A5\n\
";
  }

  static const char* value(const ::rospb_pin_write::Pots_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rospb_pin_write::Pots_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pot1);
      stream.next(m.pot2);
      stream.next(m.A0);
      stream.next(m.A1);
      stream.next(m.A2);
      stream.next(m.A3);
      stream.next(m.A4);
      stream.next(m.A5);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Pots_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rospb_pin_write::Pots_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rospb_pin_write::Pots_<ContainerAllocator>& v)
  {
    s << indent << "pot1: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pot1);
    s << indent << "pot2: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pot2);
    s << indent << "A0: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.A0);
    s << indent << "A1: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.A1);
    s << indent << "A2: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.A2);
    s << indent << "A3: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.A3);
    s << indent << "A4: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.A4);
    s << indent << "A5: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.A5);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSPB_PIN_WRITE_MESSAGE_POTS_H
