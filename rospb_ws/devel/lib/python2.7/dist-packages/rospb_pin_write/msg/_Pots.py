# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospb_pin_write/Pots.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Pots(genpy.Message):
  _md5sum = "87137d7724e5f2f39cedc2787f725d30"
  _type = "rospb_pin_write/Pots"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint16 pot1
uint16 pot2
uint16 A0
uint16 A1
uint16 A2
uint16 A3
uint16 A4
uint16 A5
"""
  __slots__ = ['pot1','pot2','A0','A1','A2','A3','A4','A5']
  _slot_types = ['uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pot1,pot2,A0,A1,A2,A3,A4,A5

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Pots, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.pot1 is None:
        self.pot1 = 0
      if self.pot2 is None:
        self.pot2 = 0
      if self.A0 is None:
        self.A0 = 0
      if self.A1 is None:
        self.A1 = 0
      if self.A2 is None:
        self.A2 = 0
      if self.A3 is None:
        self.A3 = 0
      if self.A4 is None:
        self.A4 = 0
      if self.A5 is None:
        self.A5 = 0
    else:
      self.pot1 = 0
      self.pot2 = 0
      self.A0 = 0
      self.A1 = 0
      self.A2 = 0
      self.A3 = 0
      self.A4 = 0
      self.A5 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8H().pack(_x.pot1, _x.pot2, _x.A0, _x.A1, _x.A2, _x.A3, _x.A4, _x.A5))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.pot1, _x.pot2, _x.A0, _x.A1, _x.A2, _x.A3, _x.A4, _x.A5,) = _get_struct_8H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8H().pack(_x.pot1, _x.pot2, _x.A0, _x.A1, _x.A2, _x.A3, _x.A4, _x.A5))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.pot1, _x.pot2, _x.A0, _x.A1, _x.A2, _x.A3, _x.A4, _x.A5,) = _get_struct_8H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8H = None
def _get_struct_8H():
    global _struct_8H
    if _struct_8H is None:
        _struct_8H = struct.Struct("<8H")
    return _struct_8H
